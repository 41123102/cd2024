<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>41123102協同產品設計實習</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2024-06-14T15:10:00+08:00</updated><entry><title>2024 Spring W17</title><link href="./2024-Spring-w17(2)-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T15:10:00+08:00</published><updated>2024-06-14T09:22:13+08:00</updated><author><name>41123102</name></author><id>tag:None,2024-06-14:./2024-Spring-w17(2)-blog-tutorial.html</id><content type="html">&lt;p&gt;nx 繪圖過程
https://drive.google.com/drive/folders/1jRdE-5vvakLtfndgSLuosV9Z72m9SxWv?usp=sharing&lt;/p&gt;
</content><category term="w17"></category><category term="NX繪圖"></category></entry><entry><title>2024 Spring</title><link href="./2024-Spring-w17-blog-tutorial.html" rel="alternate"></link><published>2024-06-14T14:50:00+08:00</published><updated>2024-06-14T06:27:31+08:00</updated><author><name>41123102</name></author><id>tag:None,2024-06-14:./2024-Spring-w17-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 &lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 &lt;/p&gt;

&lt;h1&gt;小組作業&lt;/h1&gt;
&lt;p&gt;https://drive.google.com/file/d/1-20BaUcMDjdvYioTKuoU-B5Z20cwx8ph/view?usp=drive_link&lt;/p&gt;</content><category term="w17"></category><category term="小組作業"></category></entry><entry><title>2024 Spring 期末作業</title><link href="./2024-Spring-w20-blog-tutorial.html" rel="alternate"></link><published>2024-05-31T14:50:00+08:00</published><updated>2024-06-07T06:41:53+08:00</updated><author><name>41123102</name></author><id>tag:None,2024-05-31:./2024-Spring-w20-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 &lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 &lt;/p&gt;


&lt;h1&gt;利用NX繪製零組件&lt;/h1&gt;
&lt;p&gt;由其他小組人員合併零組件，導入程式。因忘記錄影，需重畫零件。&lt;/p&gt;
&lt;h1&gt;研究用AI論文閱讀軟件整理資料以及延伸模擬程式的方法,鋼球平衡台控制與模擬的實習步驟.&lt;/h1&gt;
&lt;h1&gt;小組建odoo群組，丟上研究內容及零件。&lt;/h1&gt;</content><category term="w12"></category><category term="網誌日記"></category></entry><entry><title>2024 Spring 課程W10</title><link href="./2024-Spring-w10-blog-tutorial.html" rel="alternate"></link><published>2024-05-17T14:50:00+08:00</published><updated>2024-06-07T06:41:58+08:00</updated><author><name>41123102</name></author><id>tag:None,2024-05-17:./2024-Spring-w10-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 &lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 &lt;/p&gt;


&lt;h1&gt;論文1:Construction and theoretical study of a ball balancing&lt;/h1&gt;
&lt;p&gt;摘要:&lt;/p&gt;
&lt;p&gt;積分控制器的輸出信號可消除穩態誤差，但可能導致系統響應惡化。積分項的輸出信號定義為
方程式。系統需線性化以處理非線性問題。PID控制器的調整過程包括使用初始值、調整KD值以獲得適當的增益值。&lt;/p&gt;
&lt;p&gt;結論:&lt;/p&gt;
&lt;p&gt;涉及控制系統中的積分控制、系統線性化和PID控制器的調整穩定自然不穩定或半穩定系統的
性能限制在於需要對狀態進行調整，這與理論期望有所不同。控制器的設計和輸入是穩定系統
的限制因素，需要考慮調整狀態、控制器設計和輸入。
對於球平衡平台，調整狀態是通過伺服馬達實現的，控制器依賴於輸入，而輸入可以是各種參
數如溫度、壓力、速度等。&lt;/p&gt;
&lt;h1&gt;論文二：A real time control system for balancing a ball on a platform with FPGA parallel implementation&lt;/h1&gt;
&lt;p&gt;摘要:&lt;/p&gt;
&lt;p&gt;提出了一個基於PID調節器的新解決方案，用於實時平衡平台上球的位置調節。通過FPGA實
現PID調節器，提高了對球位置調節的準確性。使用平行計算在FPGA上實現PID調節器，提高
系統速度和功率，通過自然模擬證實了在平台上平衡球位置的準確性。&lt;/p&gt;
&lt;p&gt;結論&lt;/p&gt;
&lt;p&gt;提出了基於PID調節器的新解決方案，用於實時平衡平台上球的位置調節。通過自然模擬證實
了在平台上調節球位置的增加準確性，這些設計可用於實時控制具有多個受控參數的高速物
體。&lt;/p&gt;
&lt;h1&gt;論文三：Simulation and Experimental Study of Ball Position Control at Biaxial Platform using State Space Approach&lt;/h1&gt;
&lt;p&gt;摘要:&lt;/p&gt;
&lt;p&gt;本文介紹了在平板上平衡球的控制策略。通過三種穩定結構：PD控制器、全狀態反饋和狀態
觀測器與狀態反饋。使用Kinetis K60數字信號控制器進行實驗驗證，通過線性化策略實現系統穩定，三種結構均使用極點配置方法設。通過實驗和模擬比較結果，展示了最佳結構的性能，這些控制策略對於平衡球在平板上的穩定具有重要意義。&lt;/p&gt;
&lt;p&gt;結論:&lt;/p&gt;
&lt;p&gt;本文介紹了在平板上平衡球的控制策略，通過三種穩定結構的實驗驗證和比較，展示了最佳結
構的性能。並且通過線性化策略實現系統的穩定。通過實驗和模擬比較結果，證明了控制器能
夠實現預期的目標，並且能夠追踪球的位置。&lt;/p&gt;
&lt;h1&gt;論文四：Design and Implementation a Ball Balancing System for Control Theory Course&lt;/h1&gt;
&lt;p&gt;摘要:&lt;/p&gt;
&lt;p&gt;設計目的：開發一個球平衡系統，用於控制理論課程，學生可學習PID控制基礎。
原型：三個原型比較，最終模型使用木材，3D打印，Arduino控制。
控制算法：使用PID控制，實時調整梁角度以保持球平衡。
MATLAB實時數據：介面程式可在MATLAB中繪製球位置曲線。
實驗：不同球體實驗結果，PID係數調整。&lt;/p&gt;
&lt;p&gt;結論:&lt;/p&gt;
&lt;p&gt;球平衡系統旨在教育控制理論應用，讓學生應用PID控制原則。該系統涉及經典控制系統組
件，並作為閉環反饋理論的實踐平台。總的來說，梁上的球系統有效展示了反饋控制算法。&lt;/p&gt;
&lt;h1&gt;論文五：Ball on the plate balancing control system&lt;/h1&gt;
&lt;p&gt;摘要:&lt;/p&gt;
&lt;p&gt;本文描述了一個球平衡實驗室測試台的設計，使用步進馬達和位置傳感器來改變平台傾斜角度。控制系統包括PID控制器，
。實驗結果表明控制系統能夠成功維持球的位置穩定。&lt;/p&gt;
&lt;p&gt;結論:&lt;/p&gt;
&lt;p&gt;本文描述了一個球平衡實驗室測試台的設計，可用於測試穩定和平衡控制算法，
。使用AVR微控制器的控制系統追蹤球在電阻觸摸屏上的位置，並計算位置誤差，即球相對於
電阻玻璃中心點的位移。
此實驗室測試台配備了步進馬達和位置傳感器，以改變平台的傾斜角度，並具有PID控制器，
能夠維持球在電阻屏幕中心點。&lt;/p&gt;
&lt;h1&gt;論文六：2D Ball Balancer Control using QUARC&lt;/h1&gt;
&lt;p&gt;摘要:&lt;/p&gt;
&lt;p&gt;使用頭頂攝影機讀取球的位置，控制器可檢測球的位置並輸出平面位置，考慮內迴路控制器設
計、模擬PID步階響應、調整伺服負載齒輪以保持球的位置、設置步階振幅並觀察反應。這份
教師手冊涵蓋了2D Ball Balancer實驗室的相關內容，包括模型建立、控制器設計和實驗操作。&lt;/p&gt;
&lt;p&gt;結論:&lt;/p&gt;
&lt;p&gt;通過調整風扇參數，可以滿足穩態誤差、定態時間和超調量規格。伺服角度在30.0度限制內，並且風扇參數調整良好，不會導致不穩定或不良影響。X-Y圖表顯示預期和模擬位置幾乎完全重合，並且在實際設備中兩個軸之間存在一定的耦合。&lt;/p&gt;</content><category term="w10"></category><category term="論文總結"></category></entry><entry><title>2024 Spring 課程W6</title><link href="./2024-Spring-w6-blog-tutorial.html" rel="alternate"></link><published>2024-04-12T14:30:00+08:00</published><updated>2024-06-07T06:42:15+08:00</updated><author><name>41123102</name></author><id>tag:None,2024-04-12:./2024-Spring-w6-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;更新分組倉儲中的分組倉儲&lt;/h1&gt;
&lt;p&gt;無法push，出現(提示您在嘗試將本地更改推送到遠端倉庫時發生了問題。錯誤訊息指出遠端倉庫包含您本地不具備的工作。)
重新git pull (從遠端倉庫拉取最新更改到本地倉庫)，再git push一次
又出現分支上的錯誤
git config pull.rebase false後，再git pull
 Git 打開一個文件以等待進行提交訊息。 
 便解決問題了&lt;/p&gt;</content><category term="w6"></category><category term="網誌編寫0412"></category><category term="pelicn"></category></entry><entry><title>2024 Spring 課程W5</title><link href="./2024-Spring-w5-blog-tutorial.html" rel="alternate"></link><published>2024-03-29T14:00:00+08:00</published><updated>2024-06-07T08:23:32+08:00</updated><author><name>41123102</name></author><id>tag:None,2024-03-29:./2024-Spring-w5-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;w5&lt;/h1&gt;
&lt;p&gt;已改版&lt;/p&gt;
&lt;h1&gt;小組內容&lt;/h1&gt;
&lt;p&gt;上週已上傳"課程文字影片"
2b_1 2b_2 內容&lt;/p&gt;</content><category term="w5"></category><category term="網誌編寫0329"></category><category term="pelicn"></category></entry><entry><title>2024 Spring 課程W1</title><link href="./2024-Spring-w1-blog-tutorial.html" rel="alternate"></link><published>2024-03-01T16:00:00+08:00</published><updated>2024-06-07T06:42:03+08:00</updated><author><name>41123102</name></author><id>tag:None,2024-03-01:./2024-Spring-w1-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統&lt;/h1&gt;
&lt;p&gt;使用者可以自行利用 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; 倉儲作為 Template, 建立自己的網站內容管理系統.&lt;/p&gt;
&lt;p&gt;引用網站網址連結的方法:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 在文章中多次引用同一個網站連結時, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt; - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 也可以使用 Markdown 的標準網站連結使用格式.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
# 引用 Python 程式的方法
for i in range(10):
    print(i, "列出字串")
&lt;/pre&gt;

&lt;p&gt;也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼.&lt;/p&gt;
&lt;p&gt;從 1 累加到 100:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100"&gt;1 add to 100&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;將 iterable 與 iterator &lt;a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438"&gt;相關說明&lt;/a&gt;, 利用 Brython 與 Ace Editor 整理在這個頁面.&lt;/p&gt;
&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 FileSaver 與 filereader --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/FileSaver.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/filereader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 ace --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/ace.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/ext-language_tools.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/mode-python3.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/snippets/python.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 --&gt;
&lt;script src="./../cmsimde/static/Cango-24v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/gearUtils-09.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/SVGpathUtils-6v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/sylvester.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/PrairieDraw.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/javascript"&gt;
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 結束--&gt;&lt;/p&gt;
&lt;!-- editor1 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor1" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run1"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console1"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console1"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd1"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console1"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;!-- editor1 結束 --&gt;
&lt;hr/&gt;&lt;!-- ########################################## --&gt;&lt;p&gt;從 1 累加到 100 part2:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100part2"&gt;1 add to 100&lt;/button&gt;&lt;button id="cango_three_gears"&gt;cango_three_gears&lt;/button&gt;&lt;button id="bsnake"&gt;BSnake&lt;/button&gt;&lt;button id="aitetris"&gt;AI Tetris&lt;/button&gt;&lt;button id="threejsblock"&gt;Rotating Block&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 結束--&gt;&lt;/p&gt;
&lt;!-- editor2 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor2" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename2" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run2"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console2"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console2"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd2"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console2"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div2"&gt;&lt;/div&gt;
&lt;!-- editor2 結束 --&gt;
&lt;hr/&gt;&lt;p&gt;
&lt;script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"&gt;&lt;/script&gt;</content><category term="w1"></category><category term="網誌編寫0218"></category><category term="pelicn"></category></entry></feed>